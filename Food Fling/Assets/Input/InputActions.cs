//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PizzaMaking"",
            ""id"": ""758514bd-d2a7-45df-a3af-03e5e6b1a3cc"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""09c80535-593c-495e-ae95-ff3e9fb4ca7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""189db745-0c64-4894-9ac7-a65af7ff904e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6497548f-a75f-40b2-b7db-49fdacb3e815"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a38caf2-d954-4061-94a5-c299119e9da0"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PizzaMaking
        m_PizzaMaking = asset.FindActionMap("PizzaMaking", throwIfNotFound: true);
        m_PizzaMaking_Select = m_PizzaMaking.FindAction("Select", throwIfNotFound: true);
        m_PizzaMaking_Drag = m_PizzaMaking.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PizzaMaking
    private readonly InputActionMap m_PizzaMaking;
    private List<IPizzaMakingActions> m_PizzaMakingActionsCallbackInterfaces = new List<IPizzaMakingActions>();
    private readonly InputAction m_PizzaMaking_Select;
    private readonly InputAction m_PizzaMaking_Drag;
    public struct PizzaMakingActions
    {
        private @InputActions m_Wrapper;
        public PizzaMakingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_PizzaMaking_Select;
        public InputAction @Drag => m_Wrapper.m_PizzaMaking_Drag;
        public InputActionMap Get() { return m_Wrapper.m_PizzaMaking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PizzaMakingActions set) { return set.Get(); }
        public void AddCallbacks(IPizzaMakingActions instance)
        {
            if (instance == null || m_Wrapper.m_PizzaMakingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PizzaMakingActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IPizzaMakingActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IPizzaMakingActions instance)
        {
            if (m_Wrapper.m_PizzaMakingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPizzaMakingActions instance)
        {
            foreach (var item in m_Wrapper.m_PizzaMakingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PizzaMakingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PizzaMakingActions @PizzaMaking => new PizzaMakingActions(this);
    public interface IPizzaMakingActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
}
